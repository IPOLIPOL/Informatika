@startuml LanguageGraph
!include <edgy/edgy>

skinparam headerAlignment left
skinparam footerAlignment left
skinparam headerFontSize 10
skinparam footerFontSize 10
skinparam headerFontName Monospace
skinparam footerFontName Monospace
skinparam titleFontName Monospace
skinparam legendBackgroundColor white
skinparam legendBorderColor black
skinparam legendFontColor black

header 
Diagram depicting the relationships 
between programming languages, compilers 
and virtual machines
end header

title Language Graph \n %page%

footer Created by IPOL %date% %time%

skinparam linetype ortho
skinparam defaultTextAlignment center
skinparam NodeFontColor black
skinparam NodeBorderColor black
skinparam NodeBackgroundColor #e4cdefff
skinparam ComponentFontColor black
skinparam ComponentBackgroundColor #b5e4eaff
skinparam ArrowColor darkgray
skinparam BackgroundColor #fefefe


' –Ø–ó–´–ö–ò
rectangle "Python" as Python
rectangle "Java" as Java
rectangle "JavaScript" as JavaScript
rectangle "C" as C
rectangle "C++" as Cpp
rectangle "Go" as Go
rectangle "Rust" as Rust
rectangle "Ruby" as Ruby
rectangle "PHP" as PHP
rectangle "C#" as CSharp
rectangle "Swift" as Swift
rectangle "Kotlin" as Kotlin
rectangle "TypeScript" as TypeScript
rectangle "Haskell" as Haskell
rectangle "Scala" as Scala
rectangle "Perl" as Perl
rectangle "Lua" as Lua
rectangle "Elixir" as Elixir
rectangle "Erlang" as Erlang
rectangle "R" as R
rectangle "Clojure" as Clojure
rectangle "Lisp" as Lisp
rectangle "Fortran" as Fortran

' –ö–û–ú–ü–ò–õ–Ø–¢–û–†–´
component "CPython" as CPython
component "GCC" as GCC
component "Clang" as Clang
component "Go Compiler (gc)" as GoCompiler
component "rustc" as rustc
component "MRI Ruby" as MRI
component "Zend Engine" as Zend
component ".NET / Roslyn" as Roslyn
component "Swift Compiler" as SwiftCompiler
component "Kotlin/JVM" as KotlinJVM
component "tsc" as TSC
component "GHC" as GHC
component "Scala Compiler" as ScalaCompiler
component "perl5" as Perl5
component "PUC-Rio Lua" as LuaImpl
component "GNU R" as GNU_R
component "Clojure on JVM" as ClojureJVM
component "SBCL / CLISP" as LispImpl
component "GFortran" as GFortran

' –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ú–ê–®–ò–ù–´ / –†–ê–ù–¢–ê–ô–ú–´ (node)
node "HotSpot JVM" as HotSpot
node "V8" as V8
node "BEAM VM" as BEAM

' –Ø–ó–´–ö ‚Üí –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
Python --> CPython
Java --> HotSpot
JavaScript --> V8
C --> GCC
Cpp --> GCC
C --> Clang
Cpp --> Clang
Go --> GoCompiler
Rust --> rustc
Ruby --> MRI
PHP --> Zend
CSharp --> Roslyn
Swift --> SwiftCompiler
Kotlin --> KotlinJVM
TypeScript --> TSC
Haskell --> GHC
Scala --> ScalaCompiler
Perl --> Perl5
Lua --> LuaImpl
Elixir --> BEAM
Erlang --> BEAM
R --> GNU_R
Clojure --> ClojureJVM
Lisp --> LispImpl
Fortran --> GFortran
GFortran --> GCC

' –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø ‚Üí –ù–ê–ü–ò–°–ê–ù–û –ù–ê
CPython --> C
HotSpot --> Cpp
V8 --> Cpp
GCC --> C
Clang --> Cpp
GoCompiler --> Go
rustc --> Rust
MRI --> C
Zend --> C
Roslyn --> CSharp
SwiftCompiler --> Cpp
KotlinJVM --> Java
TSC --> TypeScript
GHC --> Haskell
ScalaCompiler --> Scala
Perl5 --> C
LuaImpl --> C
BEAM --> C
GNU_R --> C
GNU_R --> "Fortran"
ClojureJVM --> Java
LispImpl --> C


' –û–ë–û–ó–ù–ê–ß–ï–ù–ò–Ø
cloud {
component "Compiler" as Comp
node "VirtualMachine" as VM
}

caption –ö—É—Ä—Å –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏

newpage

skinparam legendBackgroundColor white
skinparam legendBorderColor white
skinparam legendFontColor black

header 
Diagram depicting the basic definitions
 and their relationships 
end header

title Definitions \n %page%

footer Created by IPOL %date% %time%

skinparam linetype curved

legend
| | <b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è</b>|
| üîπ| –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|
| ‚ñ≠| –°—Ä–µ–¥–∞/–°–∏—Å—Ç–µ–º–∞/–ú–æ–¥—É–ª—å/–ö–æ–º–ø–æ–Ω–µ–Ω—Ç|
| üìÑ| –ê—Ä—Ç–µ—Ñ–∞–∫—Ç |
| ‚Üí| –°–≤—è–∑—å/–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å|
end legend

' –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø

rectangle "Compiler" as Compiler {
card CompileP[
üîπ –ö–æ–º–ø–∏–ª—è—Ü–∏—è (Static Compilation)
....
–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
–∏–∑ –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è)
–≤ –¥—Ä—É–≥–æ–π –¥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
_> –ª–∏–±–æ –≤ –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥ (–¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ 
–∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è),
_> –ª–∏–±–æ –≤ –±–∞–π—Ç–∫–æ–¥ (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π 
–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–ª–∏ JIT-–∫–æ–º–ø–∏–ª—è—Ü–∏–∏).
]
}
rectangle "Runtime" as Runtime {

card RunT [
üîπ –ò—Å–ø–æ–ª–Ω—è—é—â–∞—è —Å—Ä–µ–¥–∞ (Runtime)
....
–ù–∞–±–æ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏/–∏–ª–∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤,
–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è 
–ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç
—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤—Ö–æ–¥–∏—Ç
–≤ —Å–∞–º —è–∑—ã–∫, –Ω–æ –Ω—É–∂–Ω–∞ –¥–ª—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã.
]

rectangle "VirtualMachine" as VirM {
rectangle "Interpreter" as InterPret {
card InterP [
üîπ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (Interpretation)
....
–ü—Ä–æ—Ü–µ—Å—Å –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
–ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –ª–µ—Ç—É, –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π 
–∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥.
–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —á–∏—Ç–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π 
–∫–æ–¥ –∏–ª–∏ –±–∞–π—Ç–∫–æ–¥ –∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ 
–≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
]
}
rectangle "JIT-Compiler" as JIT{
card JITP [
üîπ –ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–∞ –ª–µ—Ç—É (Just-in-Time Compilation)
....
–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±–∞–π—Ç–∫–æ–¥–∞ –≤ 
–º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
–û–±—ã—á–Ω–æ —Ç–æ–ª—å–∫–æ "–≥–æ—Ä—è—á–∏–µ —É—á–∞—Å—Ç–∫–∏" 
(—á–∞—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥).
]
}
}
artifact "Native Binary Executable" as Out2 {
card NativeBinaryExecutable [
üîπ Executbale (Machine code)
....
–ë–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥, —Å–æ–¥–µ—Ä–∞–∂–∞—â–∏–π
–º–∞—à–∏–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏,
–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è CPU.
_> –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ–∑–∞–≤–∏—Å–∏–º—ã–π
_> –§–∞–π–ª—ã <i><color:blue>.exe, .bin, .out</color></i>
]
}
}

artifact "Binary Bytecode" as Byte {
card ByteCode [
üîπ –ë–∞–π—Ç–∫–æ–¥ (Bytecode)
....
–ë–∏–Ω–∞—Ä–Ω—ã–π, –Ω–æ –≤—Å—ë –µ—â—ë ""–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π"" –∫–æ–¥,
 –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –Ω–µ –¥–ª—è CPU, –∞ –¥–ª—è 
 –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã.
_> –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π
_> –§–∞–π–ª—ã <i><color:blue>.class, .pyc</color></i>
]
}

artifact "Source code" as SourceC {
card SourceCode [
üîπ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ (Source code)
....
Human-readable, plain text 
representation of a program written 
in a high-level programming language.
_> –§–∞–π–ª—ã <i><color:blue>.c, .js, .py</color></i>
]
}

artifact "Program Output"as Out1 {
card Output [
üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
....
Observable result produced by a
program during or after its execution.
It can include text printed to 
the console, files written to disk, 
network messages, graphical 
interfaces, or other side effects 
depending on the program‚Äôs logic.
]
}


$flow(SourceC, CompileP, "input")
$flow(SourceC, VirM, "input")
$flow(ByteCode, CompileP, "")
$flow(ByteCode, VirM, "input")
$flow(CompileP, ByteCode, "")
$flow(Runtime, Out1, "output")
$flow(CompileP, Out2, "output")


caption –ö—É—Ä—Å –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏

@enduml
